---
- hosts: 'all'
  remote_user: 'ubuntu'
  sudo: yes

  vars:
#    - include: vars.yml
    ruby_version: 'ruby-2.3.0'
    user: 'deploy'
    password: '123qweasd'
    home: '/home/{{ user }}'
    rbenv_root: '{{ home }}/.rbenv'
    name: 'storekeeper'
    application: '{{ home }}/applications/{{ name }}'

  pre_tasks:
      - name: 'account | create group'
        group: name=rvm state=present

      - name: 'account | create'
        user: 'name={{ user }} groups="rvm" password={{ password }} shell=/bin/bash'

      - name: 'apt | update'
        action: 'apt update_cache=yes'

      - name: 'apt | install dependencies'
        action: 'apt pkg={{ item }}'
        with_items:
          - 'libgmp-dev'
          - 'libsqlite3-dev'
          - 'sqlite3'
          - 'autoconf'
          - 'libgdbm-dev'
          - 'libncurses5-dev'
          - 'automake'
          - 'bison'
          - 'libffi-dev'
          - 'build-essential'
          - 'libssl-dev'
          - 'libyaml-dev'
          - 'libreadline6-dev'
          - 'zlib1g-dev'
          - 'libcurl4-openssl-dev'
          - 'git'
          - 'nginx'
          - 'redis-server'
          - 'postgresql'
          - 'postgresql-contrib'
          - 'libpq-dev'
          - 'imagemagick'
          - 'libmagickwand-dev'
          - 'nodejs'
          - 'htop'

      - name: 'account | authorized keys'
        authorized_key: user=deploy key="{{ lookup('file', 'keys/id_rsa.pub') }}"

      - name: 'account | copy ssh private key'
        copy: 'src=keys/id_rsa dest={{ home }}/.ssh/id_rsa owner={{ user }} group={{ user }} mode=0600'

      - name: 'account | copy ssh public key'
        copy: 'src=keys/id_rsa.pub dest={{ home }}/.ssh/id_rsa.pub owner={{ user }} group={{ user }} mode=0644'

  roles:
    - role: rvm_io.rvm1-ruby
      sudo: True
      rvm1_install_flags: '--auto-dotfiles --user-install'
      rvm1_install_path: '{{ home }}/.rvm'
      rvm1_user: '{{ user }}'
      rvm1_gpg_keys: '409B6B1796C275462A1703113804BB82D39DC0E3'
      rvm1_autolib_mode: 1
      rvm1_rubies:
        - '{{ ruby_version }}'

  tasks:
    # Устанавливаем posgresql, создаём пользователя, копируем конфиги и создаём конечную базу данных
    - name: 'postgresql | check user'
      shell: 'psql -U postgres -c "\copyright"'
      register: 'postgres_login'
      ignore_errors: yes

    - name: 'postgresql | set auth type'
      copy: 'src=configs/pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf owner=postgres group=postgres mode=0644'
      when: 'postgres_login|failed'

    - name: 'postgresql | restart service'
      service: name=postgresql state=restarted
      when: 'postgres_login|failed'

    - name: 'postgresql | create shared directory'
      shell: 'mkdir -p {{ application }}/shared/config -m 775 && chown -R {{ user }}:{{ user }} {{ home }}/applications'
      when: 'postgres_login|failed'

    - name: 'postgresql | copy database.yml'
      template: 'src=configs/database.yml dest={{ application }}/shared/config/database.yml owner={{ user }} group={{ user }} mode=0644'
      when: 'postgres_login|failed'

    - name: 'postgresql | create database'
      shell: 'createdb -U postgres -O postgres -E UTF8 -l en_US.UTF-8 {{ name }}'
      when: 'postgres_login|failed'

    - name: 'rails | copy settings.yml'
      copy: 'src=configs/settings.yml dest={{ application }}/shared/config/settings.yml owner={{ user }} group={{ user }} mode=0644'

    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}.conf'
      register: 'nginx_config_copied'
      ignore_errors: yes

    - name: 'nginx | createdir'
      shell: 'rm /etc/nginx/sites-enabled/default; mkdir -p etc/nginx/sites-enabled/'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | copy config'
      template: 'src=configs/nginx.conf dest=/etc/nginx/sites-enabled/{{ name }}.conf owner=root group=root mode=0644'
      when: 'nginx_config_copied|failed'

    - name: 'nginx | restart service'
      # Модуль service - это ещё одна удобная обёртка, указываем какой сервис и что с ним необходимо сделать
      service: name=nginx state=restarted
      when: 'nginx_config_copied|failed'